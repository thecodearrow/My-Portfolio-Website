{"version":3,"sources":["logo.svg","App.js","LeetCodeProblemsCount.jsx","serviceWorker.js","index.js"],"names":["module","exports","App","LeetCodeProblemsCount","props","state","problems_count","rp","require","cheerio","options","uri","transform","body","load","then","$","relevant_text","text","trim","substr","indexOf","substring","parseInt","match","catch","err","this","setState","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,8cCW5BC,I,+DCTMC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,eAAgB,KAHL,E,6LAQTC,EAAKC,EAAQ,KAEfC,EAAUD,EAAQ,KAElBE,EAAU,CACVC,IAAK,wEACLC,UAAW,SAAUC,GACjB,OAAOJ,EAAQK,KAAKD,KAGxBP,EAAiB,I,SAEfC,EAAGG,GACJK,MAAK,SAAUC,GACZ,IAAIC,EAAgBD,EAAE,oBAAoBE,OAAOC,OAEjDF,GADAA,EAAgBA,EAAcG,OAAOH,EAAcI,QAAQ,YAC7BC,UAAU,EAAG,KAC3ChB,EAAiBiB,SAASN,EAAcO,MAAM,OAAO,OAGxDC,OAAM,SAAUC,O,OAGrBC,KAAKC,SAAS,CAAEtB,eAAgBA,I,qIAKhC,OACI,8BACKqB,KAAKtB,MAAMC,oB,GAvCuBuB,aCU/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCVNU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,aDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a1799b0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react'\n\nexport default class LeetCodeProblemsCount extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            problems_count: 120 //this is the default\n        }\n    }\n    async componentDidMount() {\n\n        const rp = require(\"request-promise\")\n\n        var cheerio = require('cheerio'); // Basically jQuery for node.js\n\n        var options = {\n            uri: 'https://cors-anywhere.herokuapp.com/https://leetcode.com/thecodearrow',\n            transform: function (body) {\n                return cheerio.load(body);\n            }\n        };\n        let problems_count = 120;\n\n        await rp(options)\n            .then(function ($) {\n                let relevant_text = $(\".list-group-item\").text().trim();\n                relevant_text = relevant_text.substr(relevant_text.indexOf(\"Global\")) //filtering Problems Count\n                relevant_text = relevant_text.substring(0, 100);\n                problems_count = parseInt(relevant_text.match(/\\d+/)[0])\n\n            })\n            .catch(function (err) {\n                // Crawling failed or Cheerio choked...\n            });\n        this.setState({ problems_count: problems_count })\n\n    }\n    render() {\n\n        return (\n            <span>\n                {this.state.problems_count}\n            </span>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport LeetCodeProblemsCount from \"./LeetCodeProblemsCount\"\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <LeetCodeProblemsCount />\n  </React.StrictMode>,\n  document.getElementById('leetcode')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}